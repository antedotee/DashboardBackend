{
    "sourceFile": "routes/earnings.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1738897513804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738897536396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // Path: /Users/devanshydv/Documents/Backend/routes/earnings.js\n const express = require('express');\n const router = express.Router();\n+const mongoose = require('mongoose');\n const auth = require('../middleware/auth');\n const Earning = require('../models/Earning');\n const Sale = require('../models/Sale');\n \n"
                }
            ],
            "date": 1738897513804,
            "name": "Commit-0",
            "content": "// Path: /Users/devanshydv/Documents/Backend/routes/earnings.js\nconst express = require('express');\nconst router = express.Router();\nconst auth = require('../middleware/auth');\nconst Earning = require('../models/Earning');\nconst Sale = require('../models/Sale');\n\nrouter.get('/report', auth, async (req, res) => {\n    try {\n        const { year, month } = req.query;\n        const query = { author: req.user.userId };\n        \n        if (year) query.year = parseInt(year);\n        if (month) query.month = parseInt(month);\n\n        const earnings = await Earning.find(query)\n            .populate('book', 'title isbn')\n            .sort({ year: -1, month: -1 });\n\n        const totals = await Earning.aggregate([\n            { $match: query },\n            {\n                $group: {\n                    _id: null,\n                    totalRoyalty: { $sum: '$royaltyEarned' },\n                    totalSales: { $sum: '$salesCount' }\n                }\n            }\n        ]);\n\n        res.json({\n            earnings,\n            summary: totals[0] || { totalRoyalty: 0, totalSales: 0 }\n        });\n    } catch (error) {\n        res.status(500).json({ message: error.message });\n    }\n});\n\nrouter.get('/analytics', auth, async (req, res) => {\n    try {\n        const yearlyEarnings = await Earning.aggregate([\n            { $match: { author: req.user.userId } },\n            {\n                $group: {\n                    _id: {\n                        year: '$year',\n                        month: '$month'\n                    },\n                    totalEarnings: { $sum: '$royaltyEarned' },\n                    totalSales: { $sum: '$salesCount' }\n                }\n            },\n            { $sort: { '_id.year': -1, '_id.month': -1 } },\n            { $limit: 12 }\n        ]);\n\n        const bookwiseEarnings = await Earning.aggregate([\n            { $match: { author: req.user.userId } },\n            {\n                $group: {\n                    _id: '$book',\n                    totalEarnings: { $sum: '$royaltyEarned' },\n                    totalSales: { $sum: '$salesCount' }\n                }\n            }\n        ]).populate('_id', 'title');\n\n        res.json({\n            monthlyTrends: yearlyEarnings,\n            bookwiseEarnings\n        });\n    } catch (error) {\n        res.status(500).json({ message: error.message });\n    }\n});\n\n// Get earnings trends\nrouter.get('/trends', auth, async (req, res) => {\n    try {\n        const authorId = req.user.userId;\n        const { period = 'yearly' } = req.query;\n        const currentDate = new Date();\n        let startDate;\n\n        // Set time period for analysis\n        switch (period) {\n            case 'monthly':\n                startDate = new Date(currentDate.setMonth(currentDate.getMonth() - 12));\n                break;\n            case 'quarterly':\n                startDate = new Date(currentDate.setMonth(currentDate.getMonth() - 15));\n                break;\n            case 'yearly':\n                startDate = new Date(currentDate.setFullYear(currentDate.getFullYear() - 2));\n                break;\n            default:\n                startDate = new Date(currentDate.setFullYear(currentDate.getFullYear() - 1));\n        }\n\n        const trends = await Sale.aggregate([\n            {\n                $match: {\n                    author: new mongoose.Types.ObjectId(authorId),\n                    date: { $gte: startDate }\n                }\n            },\n            {\n                $group: {\n                    _id: {\n                        year: { $year: '$date' },\n                        month: { $month: '$date' }\n                    },\n                    earnings: { $sum: '$royaltyEarned' },\n                    sales: { $sum: '$quantity' },\n                    revenue: { $sum: '$amount' }\n                }\n            },\n            { $sort: { '_id.year': 1, '_id.month': 1 } }\n        ]);\n\n        // Calculate growth rates\n        const trendData = trends.map((month, index) => {\n            const previousMonth = trends[index - 1];\n            const growthRate = previousMonth ? \n                ((month.earnings - previousMonth.earnings) / previousMonth.earnings) * 100 : 0;\n\n            return {\n                period: `${month._id.year}-${month._id.month}`,\n                earnings: month.earnings,\n                sales: month.sales,\n                revenue: month.revenue,\n                growthRate: parseFloat(growthRate.toFixed(2))\n            };\n        });\n\n        res.json({\n            period,\n            trends: trendData,\n            summary: {\n                totalEarnings: trendData.reduce((acc, curr) => acc + curr.earnings, 0),\n                averageMonthlyEarnings: trendData.reduce((acc, curr) => acc + curr.earnings, 0) / trendData.length,\n                highestEarningMonth: trendData.reduce((max, curr) => curr.earnings > max.earnings ? curr : max, trendData[0]),\n                averageGrowthRate: trendData.reduce((acc, curr) => acc + curr.growthRate, 0) / (trendData.length - 1)\n            }\n        });\n\n    } catch (error) {\n        console.error('Earnings trends error:', error);\n        res.status(500).json({ message: error.message });\n    }\n});\nmodule.exports = router;"
        }
    ]
}