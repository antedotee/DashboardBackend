{
    "sourceFile": "routes/sales.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1738897314624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738897907950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+// Path: /Users/devanshdv/Documents/Backend/routes/sales.js\n+const express = require('express');\n+const router = express.Router();\n+const auth = require('../middleware/auth');\n+const Sale = require('../models/Sale');\n+const Book = require('../models/Book');\n+\n+router.post('/', auth, async (req, res) => {\n+    try {\n+        const { bookId, quantity, amount } = req.body;\n+        const book = await Book.findById(bookId);\n+        \n+        if (!book) {\n+            return res.status(404).json({ message: 'Book not found' });\n+        }\n+\n+        const royaltyEarned = (amount * book.publishingDetails.royaltyPercentage) / 100;\n+\n+        const sale = new Sale({\n+            book: bookId,\n+            author: req.user.userId,\n+            quantity,\n+            amount,\n+            royaltyEarned\n+        });\n+\n+        await sale.save();\n+\n+        await Book.findByIdAndUpdate(bookId, {\n+            $inc: {\n+                'publishingDetails.soldCopies': quantity,\n+                'publishingDetails.royaltyEarned': royaltyEarned\n+            }\n+        });\n+\n+        res.status(201).json(sale);\n+    } catch (error) {\n+        res.status(400).json({ message: error.message });\n+    }\n+});\n+\n+router.get('/analytics', auth, async (req, res) => {\n+    try {\n+        const { startDate, endDate } = req.query;\n+        const query = {\n+            author: req.user.userId,\n+            date: {}\n+        };\n+\n+        if (startDate) query.date.$gte = new Date(startDate);\n+        if (endDate) query.date.$lte = new Date(endDate);\n+\n+        const salesAnalytics = await Sale.aggregate([\n+            { $match: query },\n+            {\n+                $group: {\n+                    _id: {\n+                        year: { $year: \"$date\" },\n+                        month: { $month: \"$date\" }\n+                    },\n+                    totalSales: { $sum: \"$quantity\" },\n+                    totalRevenue: { $sum: \"$amount\" },\n+                    totalRoyalty: { $sum: \"$royaltyEarned\" }\n+                }\n+            },\n+            { $sort: { \"_id.year\": -1, \"_id.month\": -1 } }\n+        ]);\n+\n+        res.json(salesAnalytics);\n+    } catch (error) {\n+        res.status(500).json({ message: error.message });\n+    }\n+});\n+\n+// Add sales report endpoint\n+router.get('/report', auth, async (req, res) => {\n+    try {\n+        const authorId = req.user.userId;\n+        const { startDate, endDate } = req.query;\n+\n+        const query = {\n+            author: authorId\n+        };\n+\n+        // Add date range if provided\n+        if (startDate && endDate) {\n+            query.date = {\n+                $gte: new Date(startDate),\n+                $lte: new Date(endDate)\n+            };\n+        }\n+\n+        const salesReport = await Sale.aggregate([\n+            { $match: query },\n+            {\n+                $group: {\n+                    _id: {\n+                        year: { $year: '$date' },\n+                        month: { $month: '$date' }\n+                    },\n+                    totalSales: { $sum: '$quantity' },\n+                    totalRevenue: { $sum: '$amount' },\n+                    totalRoyalty: { $sum: '$royaltyEarned' },\n+                    transactions: { $sum: 1 }\n+                }\n+            },\n+            {\n+                $sort: { '_id.year': -1, '_id.month': -1 }\n+            }\n+        ]);\n+\n+        // Get book-wise breakdown\n+        const bookwiseSales = await Sale.aggregate([\n+            { $match: query },\n+            {\n+                $group: {\n+                    _id: '$book',\n+                    totalSales: { $sum: '$quantity' },\n+                    totalRevenue: { $sum: '$amount' },\n+                    totalRoyalty: { $sum: '$royaltyEarned' }\n+                }\n+            },\n+            { $sort: { totalSales: -1 } }\n+        ]);\n+\n+        const populatedBookSales = await Book.populate(bookwiseSales, {\n+            path: '_id',\n+            select: 'title genre price'\n+        });\n+\n+        res.json({\n+            summary: {\n+                totalPeriods: salesReport.length,\n+                totalRevenue: salesReport.reduce((acc, curr) => acc + curr.totalRevenue, 0),\n+                totalRoyalty: salesReport.reduce((acc, curr) => acc + curr.totalRoyalty, 0),\n+                totalSales: salesReport.reduce((acc, curr) => acc + curr.totalSales, 0)\n+            },\n+            monthlyData: salesReport,\n+            bookwiseData: populatedBookSales,\n+            dateRange: {\n+                start: startDate || 'All time',\n+                end: endDate || 'Current'\n+            }\n+        });\n+\n+    } catch (error) {\n+        console.error('Sales report error:', error);\n+        res.status(500).json({ message: error.message });\n+    }\n+});\n+// Add export endpoint\n+router.get('/export', auth, async (req, res) => {\n+    try {\n+        const { format = 'csv', startDate, endDate } = req.query;\n+        // Implementation for data export\n+    } catch (error) {\n+        res.status(500).json({ message: error.message });\n+    }\n+});\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738898044797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+// Path: /Users/devanshdv/Documents/Backend/routes/sales.js\n+const express = require('express');\n+const router = express.Router();\n+const auth = require('../middleware/auth');\n+const Sale = require('../models/Sale');\n+const Book = require('../models/Book');\n+\n+router.post('/', auth, async (req, res) => {\n+    try {\n+        const { bookId, quantity, amount } = req.body;\n+        const book = await Book.findById(bookId);\n+        \n+        if (!book) {\n+            return res.status(404).json({ message: 'Book not found' });\n+        }\n+\n+        const royaltyEarned = (amount * book.publishingDetails.royaltyPercentage) / 100;\n+\n+        const sale = new Sale({\n+            book: bookId,\n+            author: req.user.userId,\n+            quantity,\n+            amount,\n+            royaltyEarned\n+        });\n+\n+        await sale.save();\n+\n+        await Book.findByIdAndUpdate(bookId, {\n+            $inc: {\n+                'publishingDetails.soldCopies': quantity,\n+                'publishingDetails.royaltyEarned': royaltyEarned\n+            }\n+        });\n+\n+        res.status(201).json(sale);\n+    } catch (error) {\n+        res.status(400).json({ message: error.message });\n+    }\n+});\n+\n+router.get('/analytics', auth, async (req, res) => {\n+    try {\n+        const { startDate, endDate } = req.query;\n+        const query = {\n+            author: req.user.userId,\n+            date: {}\n+        };\n+\n+        if (startDate) query.date.$gte = new Date(startDate);\n+        if (endDate) query.date.$lte = new Date(endDate);\n+\n+        const salesAnalytics = await Sale.aggregate([\n+            { $match: query },\n+            {\n+                $group: {\n+                    _id: {\n+                        year: { $year: \"$date\" },\n+                        month: { $month: \"$date\" }\n+                    },\n+                    totalSales: { $sum: \"$quantity\" },\n+                    totalRevenue: { $sum: \"$amount\" },\n+                    totalRoyalty: { $sum: \"$royaltyEarned\" }\n+                }\n+            },\n+            { $sort: { \"_id.year\": -1, \"_id.month\": -1 } }\n+        ]);\n+\n+        res.json(salesAnalytics);\n+    } catch (error) {\n+        res.status(500).json({ message: error.message });\n+    }\n+});\n+\n+// Add sales report endpoint\n+router.get('/report', auth, async (req, res) => {\n+    try {\n+        const authorId = req.user.userId;\n+        const { startDate, endDate } = req.query;\n+\n+        const query = {\n+            author: authorId\n+        };\n+\n+        // Add date range if provided\n+        if (startDate && endDate) {\n+            query.date = {\n+                $gte: new Date(startDate),\n+                $lte: new Date(endDate)\n+            };\n+        }\n+\n+        const salesReport = await Sale.aggregate([\n+            { $match: query },\n+            {\n+                $group: {\n+                    _id: {\n+                        year: { $year: '$date' },\n+                        month: { $month: '$date' }\n+                    },\n+                    totalSales: { $sum: '$quantity' },\n+                    totalRevenue: { $sum: '$amount' },\n+                    totalRoyalty: { $sum: '$royaltyEarned' },\n+                    transactions: { $sum: 1 }\n+                }\n+            },\n+            {\n+                $sort: { '_id.year': -1, '_id.month': -1 }\n+            }\n+        ]);\n+\n+        // Get book-wise breakdown\n+        const bookwiseSales = await Sale.aggregate([\n+            { $match: query },\n+            {\n+                $group: {\n+                    _id: '$book',\n+                    totalSales: { $sum: '$quantity' },\n+                    totalRevenue: { $sum: '$amount' },\n+                    totalRoyalty: { $sum: '$royaltyEarned' }\n+                }\n+            },\n+            { $sort: { totalSales: -1 } }\n+        ]);\n+\n+        const populatedBookSales = await Book.populate(bookwiseSales, {\n+            path: '_id',\n+            select: 'title genre price'\n+        });\n+\n+        res.json({\n+            summary: {\n+                totalPeriods: salesReport.length,\n+                totalRevenue: salesReport.reduce((acc, curr) => acc + curr.totalRevenue, 0),\n+                totalRoyalty: salesReport.reduce((acc, curr) => acc + curr.totalRoyalty, 0),\n+                totalSales: salesReport.reduce((acc, curr) => acc + curr.totalSales, 0)\n+            },\n+            monthlyData: salesReport,\n+            bookwiseData: populatedBookSales,\n+            dateRange: {\n+                start: startDate || 'All time',\n+                end: endDate || 'Current'\n+            }\n+        });\n+\n+    } catch (error) {\n+        console.error('Sales report error:', error);\n+        res.status(500).json({ message: error.message });\n+    }\n+});\n+// Add export endpoint\n+router.get('/export', auth, async (req, res) => {\n+    try {\n+        const { format = 'csv', startDate, endDate } = req.query;\n+        // Implementation for data export\n+    } catch (error) {\n+        res.status(500).json({ message: error.message });\n+    }\n+});\n+// Add recent sales with pagination\n+router.get('/recent', auth, async (req, res) => {\n+    try {\n+        const page = parseInt(req.query.page) || 1;\n+        const limit = parseInt(req.query.limit) || 10;\n+        const skip = (page - 1) * limit;\n+\n+        const sales = await Sale.find({ author: req.user.userId })\n+            .populate('book', 'title price')\n+            .sort({ date: -1 })\n+            .skip(skip)\n+            .limit(limit);\n+\n+        const total = await Sale.countDocuments({ author: req.user.userId });\n+\n+        res.json({\n+            sales,\n+            pagination: {\n+                currentPage: page,\n+                totalPages: Math.ceil(total / limit),\n+                totalItems: total\n+            }\n+        });\n+    } catch (error) {\n+        res.status(500).json({ message: error.message });\n+    }\n+});\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738898060578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,13 +147,44 @@\n         console.error('Sales report error:', error);\n         res.status(500).json({ message: error.message });\n     }\n });\n-// Add export endpoint\n+// Update export endpoint\n router.get('/export', auth, async (req, res) => {\n     try {\n         const { format = 'csv', startDate, endDate } = req.query;\n-        // Implementation for data export\n+        const query = { author: req.user.userId };\n+        \n+        if (startDate && endDate) {\n+            query.date = {\n+                $gte: new Date(startDate),\n+                $lte: new Date(endDate)\n+            };\n+        }\n+\n+        const sales = await Sale.find(query)\n+            .populate('book', 'title price')\n+            .sort({ date: -1 });\n+\n+        if (format === 'csv') {\n+            res.setHeader('Content-Type', 'text/csv');\n+            res.setHeader('Content-Disposition', 'attachment; filename=sales-report.csv');\n+            \n+            const csvData = [\n+                ['Date', 'Book Title', 'Quantity', 'Amount', 'Royalty Earned'],\n+                ...sales.map(sale => [\n+                    sale.date.toISOString().split('T')[0],\n+                    sale.book.title,\n+                    sale.quantity,\n+                    sale.amount,\n+                    sale.royaltyEarned\n+                ])\n+            ].map(row => row.join(',')).join('\\n');\n+\n+            res.send(csvData);\n+        } else {\n+            res.json(sales);\n+        }\n     } catch (error) {\n         res.status(500).json({ message: error.message });\n     }\n });\n@@ -183,316 +214,5 @@\n     } catch (error) {\n         res.status(500).json({ message: error.message });\n     }\n });\n-module.exports = router;\n-// Path: /Users/devanshdv/Documents/Backend/routes/sales.js\n-const express = require('express');\n-const router = express.Router();\n-const auth = require('../middleware/auth');\n-const Sale = require('../models/Sale');\n-const Book = require('../models/Book');\n-\n-router.post('/', auth, async (req, res) => {\n-    try {\n-        const { bookId, quantity, amount } = req.body;\n-        const book = await Book.findById(bookId);\n-        \n-        if (!book) {\n-            return res.status(404).json({ message: 'Book not found' });\n-        }\n-\n-        const royaltyEarned = (amount * book.publishingDetails.royaltyPercentage) / 100;\n-\n-        const sale = new Sale({\n-            book: bookId,\n-            author: req.user.userId,\n-            quantity,\n-            amount,\n-            royaltyEarned\n-        });\n-\n-        await sale.save();\n-\n-        await Book.findByIdAndUpdate(bookId, {\n-            $inc: {\n-                'publishingDetails.soldCopies': quantity,\n-                'publishingDetails.royaltyEarned': royaltyEarned\n-            }\n-        });\n-\n-        res.status(201).json(sale);\n-    } catch (error) {\n-        res.status(400).json({ message: error.message });\n-    }\n-});\n-\n-router.get('/analytics', auth, async (req, res) => {\n-    try {\n-        const { startDate, endDate } = req.query;\n-        const query = {\n-            author: req.user.userId,\n-            date: {}\n-        };\n-\n-        if (startDate) query.date.$gte = new Date(startDate);\n-        if (endDate) query.date.$lte = new Date(endDate);\n-\n-        const salesAnalytics = await Sale.aggregate([\n-            { $match: query },\n-            {\n-                $group: {\n-                    _id: {\n-                        year: { $year: \"$date\" },\n-                        month: { $month: \"$date\" }\n-                    },\n-                    totalSales: { $sum: \"$quantity\" },\n-                    totalRevenue: { $sum: \"$amount\" },\n-                    totalRoyalty: { $sum: \"$royaltyEarned\" }\n-                }\n-            },\n-            { $sort: { \"_id.year\": -1, \"_id.month\": -1 } }\n-        ]);\n-\n-        res.json(salesAnalytics);\n-    } catch (error) {\n-        res.status(500).json({ message: error.message });\n-    }\n-});\n-\n-// Add sales report endpoint\n-router.get('/report', auth, async (req, res) => {\n-    try {\n-        const authorId = req.user.userId;\n-        const { startDate, endDate } = req.query;\n-\n-        const query = {\n-            author: authorId\n-        };\n-\n-        // Add date range if provided\n-        if (startDate && endDate) {\n-            query.date = {\n-                $gte: new Date(startDate),\n-                $lte: new Date(endDate)\n-            };\n-        }\n-\n-        const salesReport = await Sale.aggregate([\n-            { $match: query },\n-            {\n-                $group: {\n-                    _id: {\n-                        year: { $year: '$date' },\n-                        month: { $month: '$date' }\n-                    },\n-                    totalSales: { $sum: '$quantity' },\n-                    totalRevenue: { $sum: '$amount' },\n-                    totalRoyalty: { $sum: '$royaltyEarned' },\n-                    transactions: { $sum: 1 }\n-                }\n-            },\n-            {\n-                $sort: { '_id.year': -1, '_id.month': -1 }\n-            }\n-        ]);\n-\n-        // Get book-wise breakdown\n-        const bookwiseSales = await Sale.aggregate([\n-            { $match: query },\n-            {\n-                $group: {\n-                    _id: '$book',\n-                    totalSales: { $sum: '$quantity' },\n-                    totalRevenue: { $sum: '$amount' },\n-                    totalRoyalty: { $sum: '$royaltyEarned' }\n-                }\n-            },\n-            { $sort: { totalSales: -1 } }\n-        ]);\n-\n-        const populatedBookSales = await Book.populate(bookwiseSales, {\n-            path: '_id',\n-            select: 'title genre price'\n-        });\n-\n-        res.json({\n-            summary: {\n-                totalPeriods: salesReport.length,\n-                totalRevenue: salesReport.reduce((acc, curr) => acc + curr.totalRevenue, 0),\n-                totalRoyalty: salesReport.reduce((acc, curr) => acc + curr.totalRoyalty, 0),\n-                totalSales: salesReport.reduce((acc, curr) => acc + curr.totalSales, 0)\n-            },\n-            monthlyData: salesReport,\n-            bookwiseData: populatedBookSales,\n-            dateRange: {\n-                start: startDate || 'All time',\n-                end: endDate || 'Current'\n-            }\n-        });\n-\n-    } catch (error) {\n-        console.error('Sales report error:', error);\n-        res.status(500).json({ message: error.message });\n-    }\n-});\n-// Add export endpoint\n-router.get('/export', auth, async (req, res) => {\n-    try {\n-        const { format = 'csv', startDate, endDate } = req.query;\n-        // Implementation for data export\n-    } catch (error) {\n-        res.status(500).json({ message: error.message });\n-    }\n-});\n-module.exports = router;\n-// Path: /Users/devanshydv/Documents/Backend/routes/sales.js\n-const express = require('express');\n-const router = express.Router();\n-const auth = require('../middleware/auth');\n-const Sale = require('../models/Sale');\n-const Book = require('../models/Book');\n-\n-router.post('/', auth, async (req, res) => {\n-    try {\n-        const { bookId, quantity, amount } = req.body;\n-        const book = await Book.findById(bookId);\n-        \n-        if (!book) {\n-            return res.status(404).json({ message: 'Book not found' });\n-        }\n-\n-        const royaltyEarned = (amount * book.publishingDetails.royaltyPercentage) / 100;\n-\n-        const sale = new Sale({\n-            book: bookId,\n-            author: req.user.userId,\n-            quantity,\n-            amount,\n-            royaltyEarned\n-        });\n-\n-        await sale.save();\n-\n-        await Book.findByIdAndUpdate(bookId, {\n-            $inc: {\n-                'publishingDetails.soldCopies': quantity,\n-                'publishingDetails.royaltyEarned': royaltyEarned\n-            }\n-        });\n-\n-        res.status(201).json(sale);\n-    } catch (error) {\n-        res.status(400).json({ message: error.message });\n-    }\n-});\n-\n-router.get('/analytics', auth, async (req, res) => {\n-    try {\n-        const { startDate, endDate } = req.query;\n-        const query = {\n-            author: req.user.userId,\n-            date: {}\n-        };\n-\n-        if (startDate) query.date.$gte = new Date(startDate);\n-        if (endDate) query.date.$lte = new Date(endDate);\n-\n-        const salesAnalytics = await Sale.aggregate([\n-            { $match: query },\n-            {\n-                $group: {\n-                    _id: {\n-                        year: { $year: \"$date\" },\n-                        month: { $month: \"$date\" }\n-                    },\n-                    totalSales: { $sum: \"$quantity\" },\n-                    totalRevenue: { $sum: \"$amount\" },\n-                    totalRoyalty: { $sum: \"$royaltyEarned\" }\n-                }\n-            },\n-            { $sort: { \"_id.year\": -1, \"_id.month\": -1 } }\n-        ]);\n-\n-        res.json(salesAnalytics);\n-    } catch (error) {\n-        res.status(500).json({ message: error.message });\n-    }\n-});\n-\n-// Add sales report endpoint\n-router.get('/report', auth, async (req, res) => {\n-    try {\n-        const authorId = req.user.userId;\n-        const { startDate, endDate } = req.query;\n-\n-        const query = {\n-            author: authorId\n-        };\n-\n-        // Add date range if provided\n-        if (startDate && endDate) {\n-            query.date = {\n-                $gte: new Date(startDate),\n-                $lte: new Date(endDate)\n-            };\n-        }\n-\n-        const salesReport = await Sale.aggregate([\n-            { $match: query },\n-            {\n-                $group: {\n-                    _id: {\n-                        year: { $year: '$date' },\n-                        month: { $month: '$date' }\n-                    },\n-                    totalSales: { $sum: '$quantity' },\n-                    totalRevenue: { $sum: '$amount' },\n-                    totalRoyalty: { $sum: '$royaltyEarned' },\n-                    transactions: { $sum: 1 }\n-                }\n-            },\n-            {\n-                $sort: { '_id.year': -1, '_id.month': -1 }\n-            }\n-        ]);\n-\n-        // Get book-wise breakdown\n-        const bookwiseSales = await Sale.aggregate([\n-            { $match: query },\n-            {\n-                $group: {\n-                    _id: '$book',\n-                    totalSales: { $sum: '$quantity' },\n-                    totalRevenue: { $sum: '$amount' },\n-                    totalRoyalty: { $sum: '$royaltyEarned' }\n-                }\n-            },\n-            { $sort: { totalSales: -1 } }\n-        ]);\n-\n-        const populatedBookSales = await Book.populate(bookwiseSales, {\n-            path: '_id',\n-            select: 'title genre price'\n-        });\n-\n-        res.json({\n-            summary: {\n-                totalPeriods: salesReport.length,\n-                totalRevenue: salesReport.reduce((acc, curr) => acc + curr.totalRevenue, 0),\n-                totalRoyalty: salesReport.reduce((acc, curr) => acc + curr.totalRoyalty, 0),\n-                totalSales: salesReport.reduce((acc, curr) => acc + curr.totalSales, 0)\n-            },\n-            monthlyData: salesReport,\n-            bookwiseData: populatedBookSales,\n-            dateRange: {\n-                start: startDate || 'All time',\n-                end: endDate || 'Current'\n-            }\n-        });\n-\n-    } catch (error) {\n-        console.error('Sales report error:', error);\n-        res.status(500).json({ message: error.message });\n-    }\n-});\n module.exports = router;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1738897314624,
            "name": "Commit-0",
            "content": "// Path: /Users/devanshydv/Documents/Backend/routes/sales.js\nconst express = require('express');\nconst router = express.Router();\nconst auth = require('../middleware/auth');\nconst Sale = require('../models/Sale');\nconst Book = require('../models/Book');\n\nrouter.post('/', auth, async (req, res) => {\n    try {\n        const { bookId, quantity, amount } = req.body;\n        const book = await Book.findById(bookId);\n        \n        if (!book) {\n            return res.status(404).json({ message: 'Book not found' });\n        }\n\n        const royaltyEarned = (amount * book.publishingDetails.royaltyPercentage) / 100;\n\n        const sale = new Sale({\n            book: bookId,\n            author: req.user.userId,\n            quantity,\n            amount,\n            royaltyEarned\n        });\n\n        await sale.save();\n\n        await Book.findByIdAndUpdate(bookId, {\n            $inc: {\n                'publishingDetails.soldCopies': quantity,\n                'publishingDetails.royaltyEarned': royaltyEarned\n            }\n        });\n\n        res.status(201).json(sale);\n    } catch (error) {\n        res.status(400).json({ message: error.message });\n    }\n});\n\nrouter.get('/analytics', auth, async (req, res) => {\n    try {\n        const { startDate, endDate } = req.query;\n        const query = {\n            author: req.user.userId,\n            date: {}\n        };\n\n        if (startDate) query.date.$gte = new Date(startDate);\n        if (endDate) query.date.$lte = new Date(endDate);\n\n        const salesAnalytics = await Sale.aggregate([\n            { $match: query },\n            {\n                $group: {\n                    _id: {\n                        year: { $year: \"$date\" },\n                        month: { $month: \"$date\" }\n                    },\n                    totalSales: { $sum: \"$quantity\" },\n                    totalRevenue: { $sum: \"$amount\" },\n                    totalRoyalty: { $sum: \"$royaltyEarned\" }\n                }\n            },\n            { $sort: { \"_id.year\": -1, \"_id.month\": -1 } }\n        ]);\n\n        res.json(salesAnalytics);\n    } catch (error) {\n        res.status(500).json({ message: error.message });\n    }\n});\n\n// Add sales report endpoint\nrouter.get('/report', auth, async (req, res) => {\n    try {\n        const authorId = req.user.userId;\n        const { startDate, endDate } = req.query;\n\n        const query = {\n            author: authorId\n        };\n\n        // Add date range if provided\n        if (startDate && endDate) {\n            query.date = {\n                $gte: new Date(startDate),\n                $lte: new Date(endDate)\n            };\n        }\n\n        const salesReport = await Sale.aggregate([\n            { $match: query },\n            {\n                $group: {\n                    _id: {\n                        year: { $year: '$date' },\n                        month: { $month: '$date' }\n                    },\n                    totalSales: { $sum: '$quantity' },\n                    totalRevenue: { $sum: '$amount' },\n                    totalRoyalty: { $sum: '$royaltyEarned' },\n                    transactions: { $sum: 1 }\n                }\n            },\n            {\n                $sort: { '_id.year': -1, '_id.month': -1 }\n            }\n        ]);\n\n        // Get book-wise breakdown\n        const bookwiseSales = await Sale.aggregate([\n            { $match: query },\n            {\n                $group: {\n                    _id: '$book',\n                    totalSales: { $sum: '$quantity' },\n                    totalRevenue: { $sum: '$amount' },\n                    totalRoyalty: { $sum: '$royaltyEarned' }\n                }\n            },\n            { $sort: { totalSales: -1 } }\n        ]);\n\n        const populatedBookSales = await Book.populate(bookwiseSales, {\n            path: '_id',\n            select: 'title genre price'\n        });\n\n        res.json({\n            summary: {\n                totalPeriods: salesReport.length,\n                totalRevenue: salesReport.reduce((acc, curr) => acc + curr.totalRevenue, 0),\n                totalRoyalty: salesReport.reduce((acc, curr) => acc + curr.totalRoyalty, 0),\n                totalSales: salesReport.reduce((acc, curr) => acc + curr.totalSales, 0)\n            },\n            monthlyData: salesReport,\n            bookwiseData: populatedBookSales,\n            dateRange: {\n                start: startDate || 'All time',\n                end: endDate || 'Current'\n            }\n        });\n\n    } catch (error) {\n        console.error('Sales report error:', error);\n        res.status(500).json({ message: error.message });\n    }\n});\nmodule.exports = router;"
        }
    ]
}