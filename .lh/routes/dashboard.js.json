{
    "sourceFile": "routes/dashboard.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1738894827258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738896501376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,5 +200,79 @@\n         res.status(500).json({ message: error.message });\n     }\n });\n \n+// Book-specific Analytics\n+router.get('/books/:bookId/analytics', auth, async (req, res) => {\n+    try {\n+        const { bookId } = req.params;\n+        const authorId = req.user.userId;\n+\n+        // Verify book ownership\n+        const book = await Book.findOne({ _id: bookId, author: authorId });\n+        if (!book) {\n+            return res.status(404).json({ message: 'Book not found' });\n+        }\n+\n+        // Get monthly sales trend\n+        const monthlySales = await Sale.aggregate([\n+            {\n+                $match: {\n+                    book: mongoose.Types.ObjectId(bookId),\n+                    author: authorId\n+                }\n+            },\n+            {\n+                $group: {\n+                    _id: {\n+                        month: { $month: '$date' },\n+                        year: { $year: '$date' }\n+                    },\n+                    sales: { $sum: '$quantity' },\n+                    revenue: { $sum: '$royaltyEarned' }\n+                }\n+            },\n+            { $sort: { '_id.year': 1, '_id.month': 1 } }\n+        ]);\n+\n+        // Get inventory status\n+        const inventory = await Inventory.findOne({ book: bookId })\n+            .select('quantityAvailable quantityTotal');\n+\n+        // Calculate performance metrics\n+        const totalSales = book.publishingDetails.soldCopies;\n+        const totalRevenue = book.publishingDetails.royaltyEarned;\n+        const stockLevel = inventory ? inventory.quantityAvailable : 0;\n+        const stockPercentage = inventory ? \n+            (inventory.quantityAvailable / inventory.quantityTotal) * 100 : 0;\n+\n+        res.json({\n+            bookDetails: {\n+                title: book.title,\n+                isbn: book.isbn,\n+                genre: book.genre,\n+                price: book.price\n+            },\n+            performance: {\n+                totalSales,\n+                totalRevenue,\n+                averageMonthlyRevenue: totalRevenue / monthlySales.length || 0,\n+                royaltyPercentage: book.publishingDetails.royaltyPercentage\n+            },\n+            inventory: {\n+                currentStock: stockLevel,\n+                stockPercentage,\n+                needsRestock: stockLevel < 20\n+            },\n+            salesTrend: monthlySales.map(month => ({\n+                month: moment().month(month._id.month - 1).format('MMM'),\n+                year: month._id.year,\n+                sales: month.sales,\n+                revenue: month.revenue\n+            }))\n+        });\n+    } catch (error) {\n+        res.status(500).json({ message: error.message });\n+    }\n+});\n+\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738896559315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,77 +200,75 @@\n         res.status(500).json({ message: error.message });\n     }\n });\n \n-// Book-specific Analytics\n+// Book Analytics Endpoint\n router.get('/books/:bookId/analytics', auth, async (req, res) => {\n     try {\n         const { bookId } = req.params;\n         const authorId = req.user.userId;\n+        const currentDate = moment();\n+        const startOfMonth = moment().startOf('month');\n \n-        // Verify book ownership\n-        const book = await Book.findOne({ _id: bookId, author: authorId });\n+        // Verify book ownership and get details\n+        const book = await Book.findOne({ \n+            _id: bookId, \n+            author: authorId \n+        });\n+\n         if (!book) {\n             return res.status(404).json({ message: 'Book not found' });\n         }\n \n-        // Get monthly sales trend\n-        const monthlySales = await Sale.aggregate([\n+        // Get sales analytics\n+        const salesAnalytics = await Sale.aggregate([\n             {\n                 $match: {\n                     book: mongoose.Types.ObjectId(bookId),\n-                    author: authorId\n+                    author: mongoose.Types.ObjectId(authorId)\n                 }\n             },\n             {\n                 $group: {\n                     _id: {\n                         month: { $month: '$date' },\n                         year: { $year: '$date' }\n                     },\n-                    sales: { $sum: '$quantity' },\n-                    revenue: { $sum: '$royaltyEarned' }\n+                    monthlySales: { $sum: '$quantity' },\n+                    monthlyRevenue: { $sum: '$royaltyEarned' }\n                 }\n             },\n-            { $sort: { '_id.year': 1, '_id.month': 1 } }\n+            { $sort: { '_id.year': -1, '_id.month': -1 } }\n         ]);\n \n-        // Get inventory status\n-        const inventory = await Inventory.findOne({ book: bookId })\n-            .select('quantityAvailable quantityTotal');\n+        // Get current inventory status\n+        const inventory = await Inventory.findOne({ book: bookId });\n \n-        // Calculate performance metrics\n-        const totalSales = book.publishingDetails.soldCopies;\n-        const totalRevenue = book.publishingDetails.royaltyEarned;\n-        const stockLevel = inventory ? inventory.quantityAvailable : 0;\n-        const stockPercentage = inventory ? \n-            (inventory.quantityAvailable / inventory.quantityTotal) * 100 : 0;\n-\n-        res.json({\n-            bookDetails: {\n+        const analytics = {\n+            bookInfo: {\n                 title: book.title,\n                 isbn: book.isbn,\n                 genre: book.genre,\n-                price: book.price\n+                price: book.price,\n+                publishingDetails: book.publishingDetails\n             },\n-            performance: {\n-                totalSales,\n-                totalRevenue,\n-                averageMonthlyRevenue: totalRevenue / monthlySales.length || 0,\n-                royaltyPercentage: book.publishingDetails.royaltyPercentage\n+            currentStats: {\n+                totalSales: book.publishingDetails.soldCopies,\n+                totalRevenue: book.publishingDetails.royaltyEarned,\n+                currentStock: inventory ? inventory.quantityAvailable : 0,\n+                stockStatus: inventory ? \n+                    (inventory.quantityAvailable < 20 ? 'Low' : 'Adequate') : 'Unknown'\n             },\n-            inventory: {\n-                currentStock: stockLevel,\n-                stockPercentage,\n-                needsRestock: stockLevel < 20\n-            },\n-            salesTrend: monthlySales.map(month => ({\n+            salesTrend: salesAnalytics.map(month => ({\n                 month: moment().month(month._id.month - 1).format('MMM'),\n                 year: month._id.year,\n-                sales: month.sales,\n-                revenue: month.revenue\n-            }))\n-        });\n+                sales: month.monthlySales,\n+                revenue: month.monthlyRevenue\n+            })),\n+            lastUpdated: new Date()\n+        };\n+\n+        res.json(analytics);\n     } catch (error) {\n         res.status(500).json({ message: error.message });\n     }\n });\n"
                },
                {
                    "date": 1738896578030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n const express = require('express');\n const router = express.Router();\n const auth = require('../middleware/auth');\n const moment = require('moment');\n+const mongoose = require('mongoose');  // Add this import\n const Book = require('../models/Book');\n const Sale = require('../models/Sale');\n const Inventory = require('../models/Inventory');\n const Earning = require('../models/Earning');\n"
                },
                {
                    "date": 1738896660425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,265 @@\n+// Path: /Users/devanshdv/Documents/Backend/routes/dashboard.js\n+const express = require('express');\n+const router = express.Router();\n+const auth = require('../middleware/auth');\n+const moment = require('moment');\n+const mongoose = require('mongoose');  // Add this import\n+const Book = require('../models/Book');\n+const Sale = require('../models/Sale');\n+const Inventory = require('../models/Inventory');\n+const Earning = require('../models/Earning');\n+\n+// Main Dashboard Summary\n+router.get('/summary', auth, async (req, res) => {\n+    try {\n+        const authorId = req.user.userId;\n+        const currentDate = moment();\n+        const startOfMonth = moment().startOf('month');\n+        const previousMonth = moment().subtract(1, 'month').startOf('month');\n+        const startOfYear = moment().startOf('year');\n+\n+        // Overall Stats\n+        const overallStats = await Book.aggregate([\n+            { $match: { author: authorId } },\n+            {\n+                $group: {\n+                    _id: null,\n+                    totalBooks: { $sum: 1 },\n+                    totalInventory: { $sum: '$publishingDetails.quantity' },\n+                    avgRoyaltyPercentage: { $avg: '$publishingDetails.royaltyPercentage' },\n+                    totalEarnings: { $sum: '$publishingDetails.royaltyEarned' }\n+                }\n+            }\n+        ]);\n+\n+        // Monthly Performance\n+        const monthlyPerformance = await Sale.aggregate([\n+            {\n+                $match: {\n+                    author: authorId,\n+                    date: { \n+                        $gte: previousMonth.toDate(),\n+                        $lte: currentDate.toDate()\n+                    }\n+                }\n+            },\n+            {\n+                $group: {\n+                    _id: {\n+                        year: { $year: '$date' },\n+                        month: { $month: '$date' }\n+                    },\n+                    totalRoyalty: { $sum: '$royaltyEarned' },\n+                    totalSales: { $sum: '$quantity' }\n+                }\n+            }\n+        ]);\n+\n+        // Calculate growth\n+        const currentMonthData = monthlyPerformance.find(m => \n+            m._id.month === currentDate.month() + 1) || { totalRoyalty: 0, totalSales: 0 };\n+        const previousMonthData = monthlyPerformance.find(m => \n+            m._id.month === previousMonth.month() + 1) || { totalRoyalty: 0 };\n+        const growth = previousMonthData.totalRoyalty ? \n+            ((currentMonthData.totalRoyalty - previousMonthData.totalRoyalty) / previousMonthData.totalRoyalty) * 100 : 0;\n+\n+        const monthlyEarnings = await Sale.aggregate([\n+            {\n+                $match: {\n+                    author: authorId,\n+                    date: { $gte: startOfMonth.toDate() }\n+                }\n+            },\n+            {\n+                $group: {\n+                    _id: null,\n+                    totalRoyalty: { $sum: '$royaltyEarned' },\n+                    totalSales: { $sum: '$quantity' }\n+                }\n+            }\n+        ]);\n+\n+        const yearlyTrend = await Sale.aggregate([\n+            {\n+                $match: {\n+                    author: authorId,\n+                    date: { $gte: startOfYear.toDate() }\n+                }\n+            },\n+            {\n+                $group: {\n+                    _id: {\n+                        month: { $month: '$date' }\n+                    },\n+                    earnings: { $sum: '$royaltyEarned' },\n+                    sales: { $sum: '$quantity' }\n+                }\n+            },\n+            { $sort: { '_id.month': 1 } }\n+        ]);\n+\n+        const topBooks = await Sale.aggregate([\n+            { $match: { author: authorId } },\n+            {\n+                $group: {\n+                    _id: '$book',\n+                    totalSales: { $sum: '$quantity' },\n+                    totalRoyalty: { $sum: '$royaltyEarned' }\n+                }\n+            },\n+            { $sort: { totalSales: -1 } },\n+            { $limit: 5 }\n+        ]);\n+\n+        const inventoryAlerts = await Inventory.find({\n+            author: authorId,\n+            quantityAvailable: { $lt: 20 }\n+        }).populate('book', 'title');\n+\n+        const recentTransactions = await Sale.find({ author: authorId })\n+            .sort({ date: -1 })\n+            .limit(5)\n+            .populate('book', 'title');\n+\n+        const dashboardData = {\n+            overallStats: overallStats[0] || {\n+                totalBooks: 0,\n+                totalInventory: 0,\n+                avgRoyaltyPercentage: 0\n+            },\n+            monthlyPerformance: monthlyEarnings[0] || {\n+                totalRoyalty: 0,\n+                totalSales: 0\n+            },\n+            yearlyTrend,\n+            topBooks: await Book.populate(topBooks, { path: '_id', select: 'title' }),\n+            inventoryAlerts,\n+            recentTransactions,\n+            lastUpdated: new Date()\n+        };\n+\n+        res.json(dashboardData);\n+    } catch (error) {\n+        res.status(500).json({ message: error.message });\n+    }\n+});\n+\n+// Add new endpoints for Monthly Revenue\n+router.get('/earnings/monthly', auth, async (req, res) => {\n+    try {\n+        const authorId = req.user.userId;\n+        const currentMonth = moment().startOf('month');\n+        const target = 15000; // You might want to make this configurable\n+\n+        const monthlyRevenue = await Sale.aggregate([\n+            {\n+                $match: {\n+                    author: authorId,\n+                    date: { $gte: currentMonth.toDate() }\n+                }\n+            },\n+            {\n+                $group: {\n+                    _id: null,\n+                    current: { $sum: '$royaltyEarned' }\n+                }\n+            }\n+        ]);\n+\n+        const current = monthlyRevenue[0]?.current || 0;\n+        const progress = (current / target) * 100;\n+\n+        res.json({\n+            monthlyRevenue: {\n+                target,\n+                current,\n+                progress,\n+                growth: 28.14 // Calculate this based on previous month\n+            }\n+        });\n+    } catch (error) {\n+        res.status(500).json({ message: error.message });\n+    }\n+});\n+\n+router.get('/genre-analytics', auth, async (req, res) => {\n+    try {\n+        const genreStats = await Book.aggregate([\n+            { $match: { author: req.user.userId } },\n+            {\n+                $group: {\n+                    _id: '$genre',\n+                    bookCount: { $sum: 1 },\n+                    totalSales: { $sum: '$publishingDetails.soldCopies' },\n+                    avgRoyalty: { $avg: '$publishingDetails.royaltyEarned' }\n+                }\n+            }\n+        ]);\n+\n+        res.json(genreStats);\n+    } catch (error) {\n+        res.status(500).json({ message: error.message });\n+    }\n+});\n+\n+// Book Analytics Endpoint\n+router.get('/books/:bookId/analytics', auth, async (req, res) => {\n+    try {\n+        const { bookId } = req.params;\n+        const authorId = req.user.userId;\n+\n+        // Get monthly sales trend\n+        const monthlySales = await Sale.aggregate([\n+            {\n+                $match: {\n+                    book: new mongoose.Types.ObjectId(bookId),\n+                    author: new mongoose.Types.ObjectId(authorId)\n+                }\n+            },\n+            {\n+                $group: {\n+                    _id: {\n+                        month: { $month: '$date' },\n+                        year: { $year: '$date' }\n+                    },\n+                    monthlySales: { $sum: '$quantity' },\n+                    monthlyRevenue: { $sum: '$royaltyEarned' }\n+                }\n+            },\n+            { $sort: { '_id.year': -1, '_id.month': -1 } }\n+        ]);\n+\n+        // Get current inventory status\n+        const inventory = await Inventory.findOne({ book: bookId });\n+\n+        const analytics = {\n+            bookInfo: {\n+                title: book.title,\n+                isbn: book.isbn,\n+                genre: book.genre,\n+                price: book.price,\n+                publishingDetails: book.publishingDetails\n+            },\n+            currentStats: {\n+                totalSales: book.publishingDetails.soldCopies,\n+                totalRevenue: book.publishingDetails.royaltyEarned,\n+                currentStock: inventory ? inventory.quantityAvailable : 0,\n+                stockStatus: inventory ? \n+                    (inventory.quantityAvailable < 20 ? 'Low' : 'Adequate') : 'Unknown'\n+            },\n+            salesTrend: salesAnalytics.map(month => ({\n+                month: moment().month(month._id.month - 1).format('MMM'),\n+                year: month._id.year,\n+                sales: month.monthlySales,\n+                revenue: month.monthlyRevenue\n+            })),\n+            lastUpdated: new Date()\n+        };\n+\n+        res.json(analytics);\n+    } catch (error) {\n+        res.status(500).json({ message: error.message });\n+    }\n+});\n+\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738896854312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,8 +207,18 @@\n     try {\n         const { bookId } = req.params;\n         const authorId = req.user.userId;\n \n+        // First, fetch the book\n+        const book = await Book.findOne({ \n+            _id: new mongoose.Types.ObjectId(bookId), \n+            author: new mongoose.Types.ObjectId(authorId) \n+        });\n+\n+        if (!book) {\n+            return res.status(404).json({ message: 'Book not found' });\n+        }\n+\n         // Get monthly sales trend\n         const monthlySales = await Sale.aggregate([\n             {\n                 $match: {\n@@ -246,9 +256,9 @@\n                 currentStock: inventory ? inventory.quantityAvailable : 0,\n                 stockStatus: inventory ? \n                     (inventory.quantityAvailable < 20 ? 'Low' : 'Adequate') : 'Unknown'\n             },\n-            salesTrend: salesAnalytics.map(month => ({\n+            salesTrend: monthlySales.map(month => ({\n                 month: moment().month(month._id.month - 1).format('MMM'),\n                 year: month._id.year,\n                 sales: month.monthlySales,\n                 revenue: month.monthlyRevenue\n@@ -257,8 +267,9 @@\n         };\n \n         res.json(analytics);\n     } catch (error) {\n+        console.error('Book analytics error:', error);\n         res.status(500).json({ message: error.message });\n     }\n });\n \n"
                },
                {
                    "date": 1738897898187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,282 +272,42 @@\n         res.status(500).json({ message: error.message });\n     }\n });\n \n-module.exports = router;\n-// Path: /Users/devanshdv/Documents/Backend/routes/dashboard.js\n-const express = require('express');\n-const router = express.Router();\n-const auth = require('../middleware/auth');\n-const moment = require('moment');\n-const mongoose = require('mongoose');  // Add this import\n-const Book = require('../models/Book');\n-const Sale = require('../models/Sale');\n-const Inventory = require('../models/Inventory');\n-const Earning = require('../models/Earning');\n-\n-// Main Dashboard Summary\n-router.get('/summary', auth, async (req, res) => {\n+// Add performance metrics endpoint\n+router.get('/performance-metrics', auth, async (req, res) => {\n     try {\n         const authorId = req.user.userId;\n-        const currentDate = moment();\n-        const startOfMonth = moment().startOf('month');\n-        const previousMonth = moment().subtract(1, 'month').startOf('month');\n-        const startOfYear = moment().startOf('year');\n-\n-        // Overall Stats\n-        const overallStats = await Book.aggregate([\n-            { $match: { author: authorId } },\n-            {\n-                $group: {\n-                    _id: null,\n-                    totalBooks: { $sum: 1 },\n-                    totalInventory: { $sum: '$publishingDetails.quantity' },\n-                    avgRoyaltyPercentage: { $avg: '$publishingDetails.royaltyPercentage' },\n-                    totalEarnings: { $sum: '$publishingDetails.royaltyEarned' }\n-                }\n-            }\n-        ]);\n-\n-        // Monthly Performance\n-        const monthlyPerformance = await Sale.aggregate([\n-            {\n-                $match: {\n-                    author: authorId,\n-                    date: { \n-                        $gte: previousMonth.toDate(),\n-                        $lte: currentDate.toDate()\n-                    }\n-                }\n-            },\n-            {\n-                $group: {\n-                    _id: {\n-                        year: { $year: '$date' },\n-                        month: { $month: '$date' }\n-                    },\n-                    totalRoyalty: { $sum: '$royaltyEarned' },\n-                    totalSales: { $sum: '$quantity' }\n-                }\n-            }\n-        ]);\n-\n-        // Calculate growth\n-        const currentMonthData = monthlyPerformance.find(m => \n-            m._id.month === currentDate.month() + 1) || { totalRoyalty: 0, totalSales: 0 };\n-        const previousMonthData = monthlyPerformance.find(m => \n-            m._id.month === previousMonth.month() + 1) || { totalRoyalty: 0 };\n-        const growth = previousMonthData.totalRoyalty ? \n-            ((currentMonthData.totalRoyalty - previousMonthData.totalRoyalty) / previousMonthData.totalRoyalty) * 100 : 0;\n-\n-        const monthlyEarnings = await Sale.aggregate([\n-            {\n-                $match: {\n-                    author: authorId,\n-                    date: { $gte: startOfMonth.toDate() }\n-                }\n-            },\n-            {\n-                $group: {\n-                    _id: null,\n-                    totalRoyalty: { $sum: '$royaltyEarned' },\n-                    totalSales: { $sum: '$quantity' }\n-                }\n-            }\n-        ]);\n-\n-        const yearlyTrend = await Sale.aggregate([\n-            {\n-                $match: {\n-                    author: authorId,\n-                    date: { $gte: startOfYear.toDate() }\n-                }\n-            },\n-            {\n-                $group: {\n-                    _id: {\n-                        month: { $month: '$date' }\n-                    },\n-                    earnings: { $sum: '$royaltyEarned' },\n-                    sales: { $sum: '$quantity' }\n-                }\n-            },\n-            { $sort: { '_id.month': 1 } }\n-        ]);\n-\n-        const topBooks = await Sale.aggregate([\n-            { $match: { author: authorId } },\n-            {\n-                $group: {\n-                    _id: '$book',\n-                    totalSales: { $sum: '$quantity' },\n-                    totalRoyalty: { $sum: '$royaltyEarned' }\n-                }\n-            },\n-            { $sort: { totalSales: -1 } },\n-            { $limit: 5 }\n-        ]);\n-\n-        const inventoryAlerts = await Inventory.find({\n-            author: authorId,\n-            quantityAvailable: { $lt: 20 }\n-        }).populate('book', 'title');\n-\n-        const recentTransactions = await Sale.find({ author: authorId })\n-            .sort({ date: -1 })\n-            .limit(5)\n-            .populate('book', 'title');\n-\n-        const dashboardData = {\n-            overallStats: overallStats[0] || {\n-                totalBooks: 0,\n-                totalInventory: 0,\n-                avgRoyaltyPercentage: 0\n-            },\n-            monthlyPerformance: monthlyEarnings[0] || {\n-                totalRoyalty: 0,\n-                totalSales: 0\n-            },\n-            yearlyTrend,\n-            topBooks: await Book.populate(topBooks, { path: '_id', select: 'title' }),\n-            inventoryAlerts,\n-            recentTransactions,\n-            lastUpdated: new Date()\n-        };\n-\n-        res.json(dashboardData);\n-    } catch (error) {\n-        res.status(500).json({ message: error.message });\n-    }\n-});\n-\n-// Add new endpoints for Monthly Revenue\n-router.get('/earnings/monthly', auth, async (req, res) => {\n-    try {\n-        const authorId = req.user.userId;\n         const currentMonth = moment().startOf('month');\n-        const target = 15000; // You might want to make this configurable\n-\n-        const monthlyRevenue = await Sale.aggregate([\n+        \n+        // Get key performance indicators\n+        const kpis = await Sale.aggregate([\n             {\n                 $match: {\n-                    author: authorId,\n+                    author: new mongoose.Types.ObjectId(authorId),\n                     date: { $gte: currentMonth.toDate() }\n                 }\n             },\n             {\n                 $group: {\n                     _id: null,\n-                    current: { $sum: '$royaltyEarned' }\n+                    totalRevenue: { $sum: '$amount' },\n+                    averageOrderValue: { $avg: '$amount' },\n+                    totalOrders: { $sum: 1 },\n+                    totalUnits: { $sum: '$quantity' }\n                 }\n             }\n         ]);\n \n-        const current = monthlyRevenue[0]?.current || 0;\n-        const progress = (current / target) * 100;\n-\n         res.json({\n-            monthlyRevenue: {\n-                target,\n-                current,\n-                progress,\n-                growth: 28.14 // Calculate this based on previous month\n+            kpis: kpis[0] || {\n+                totalRevenue: 0,\n+                averageOrderValue: 0,\n+                totalOrders: 0,\n+                totalUnits: 0\n             }\n         });\n     } catch (error) {\n         res.status(500).json({ message: error.message });\n     }\n });\n-\n-router.get('/genre-analytics', auth, async (req, res) => {\n-    try {\n-        const genreStats = await Book.aggregate([\n-            { $match: { author: req.user.userId } },\n-            {\n-                $group: {\n-                    _id: '$genre',\n-                    bookCount: { $sum: 1 },\n-                    totalSales: { $sum: '$publishingDetails.soldCopies' },\n-                    avgRoyalty: { $avg: '$publishingDetails.royaltyEarned' }\n-                }\n-            }\n-        ]);\n-\n-        res.json(genreStats);\n-    } catch (error) {\n-        res.status(500).json({ message: error.message });\n-    }\n-});\n-\n-// Book Analytics Endpoint\n-router.get('/books/:bookId/analytics', auth, async (req, res) => {\n-    try {\n-        const { bookId } = req.params;\n-        const authorId = req.user.userId;\n-        const currentDate = moment();\n-        const startOfMonth = moment().startOf('month');\n-\n-        // Verify book ownership and get details\n-        const book = await Book.findOne({ \n-            _id: bookId, \n-            author: authorId \n-        });\n-\n-        if (!book) {\n-            return res.status(404).json({ message: 'Book not found' });\n-        }\n-\n-        // Get sales analytics\n-        const salesAnalytics = await Sale.aggregate([\n-            {\n-                $match: {\n-                    book: mongoose.Types.ObjectId(bookId),\n-                    author: mongoose.Types.ObjectId(authorId)\n-                }\n-            },\n-            {\n-                $group: {\n-                    _id: {\n-                        month: { $month: '$date' },\n-                        year: { $year: '$date' }\n-                    },\n-                    monthlySales: { $sum: '$quantity' },\n-                    monthlyRevenue: { $sum: '$royaltyEarned' }\n-                }\n-            },\n-            { $sort: { '_id.year': -1, '_id.month': -1 } }\n-        ]);\n-\n-        // Get current inventory status\n-        const inventory = await Inventory.findOne({ book: bookId });\n-\n-        const analytics = {\n-            bookInfo: {\n-                title: book.title,\n-                isbn: book.isbn,\n-                genre: book.genre,\n-                price: book.price,\n-                publishingDetails: book.publishingDetails\n-            },\n-            currentStats: {\n-                totalSales: book.publishingDetails.soldCopies,\n-                totalRevenue: book.publishingDetails.royaltyEarned,\n-                currentStock: inventory ? inventory.quantityAvailable : 0,\n-                stockStatus: inventory ? \n-                    (inventory.quantityAvailable < 20 ? 'Low' : 'Adequate') : 'Unknown'\n-            },\n-            salesTrend: salesAnalytics.map(month => ({\n-                month: moment().month(month._id.month - 1).format('MMM'),\n-                year: month._id.year,\n-                sales: month.monthlySales,\n-                revenue: month.monthlyRevenue\n-            })),\n-            lastUpdated: new Date()\n-        };\n-\n-        res.json(analytics);\n-    } catch (error) {\n-        res.status(500).json({ message: error.message });\n-    }\n-});\n-\n module.exports = router;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1738894827257,
            "name": "Commit-0",
            "content": "// Path: /Users/devanshdv/Documents/Backend/routes/dashboard.js\nconst express = require('express');\nconst router = express.Router();\nconst auth = require('../middleware/auth');\nconst moment = require('moment');\nconst Book = require('../models/Book');\nconst Sale = require('../models/Sale');\nconst Inventory = require('../models/Inventory');\nconst Earning = require('../models/Earning');\n\n// Main Dashboard Summary\nrouter.get('/summary', auth, async (req, res) => {\n    try {\n        const authorId = req.user.userId;\n        const currentDate = moment();\n        const startOfMonth = moment().startOf('month');\n        const previousMonth = moment().subtract(1, 'month').startOf('month');\n        const startOfYear = moment().startOf('year');\n\n        // Overall Stats\n        const overallStats = await Book.aggregate([\n            { $match: { author: authorId } },\n            {\n                $group: {\n                    _id: null,\n                    totalBooks: { $sum: 1 },\n                    totalInventory: { $sum: '$publishingDetails.quantity' },\n                    avgRoyaltyPercentage: { $avg: '$publishingDetails.royaltyPercentage' },\n                    totalEarnings: { $sum: '$publishingDetails.royaltyEarned' }\n                }\n            }\n        ]);\n\n        // Monthly Performance\n        const monthlyPerformance = await Sale.aggregate([\n            {\n                $match: {\n                    author: authorId,\n                    date: { \n                        $gte: previousMonth.toDate(),\n                        $lte: currentDate.toDate()\n                    }\n                }\n            },\n            {\n                $group: {\n                    _id: {\n                        year: { $year: '$date' },\n                        month: { $month: '$date' }\n                    },\n                    totalRoyalty: { $sum: '$royaltyEarned' },\n                    totalSales: { $sum: '$quantity' }\n                }\n            }\n        ]);\n\n        // Calculate growth\n        const currentMonthData = monthlyPerformance.find(m => \n            m._id.month === currentDate.month() + 1) || { totalRoyalty: 0, totalSales: 0 };\n        const previousMonthData = monthlyPerformance.find(m => \n            m._id.month === previousMonth.month() + 1) || { totalRoyalty: 0 };\n        const growth = previousMonthData.totalRoyalty ? \n            ((currentMonthData.totalRoyalty - previousMonthData.totalRoyalty) / previousMonthData.totalRoyalty) * 100 : 0;\n\n        const monthlyEarnings = await Sale.aggregate([\n            {\n                $match: {\n                    author: authorId,\n                    date: { $gte: startOfMonth.toDate() }\n                }\n            },\n            {\n                $group: {\n                    _id: null,\n                    totalRoyalty: { $sum: '$royaltyEarned' },\n                    totalSales: { $sum: '$quantity' }\n                }\n            }\n        ]);\n\n        const yearlyTrend = await Sale.aggregate([\n            {\n                $match: {\n                    author: authorId,\n                    date: { $gte: startOfYear.toDate() }\n                }\n            },\n            {\n                $group: {\n                    _id: {\n                        month: { $month: '$date' }\n                    },\n                    earnings: { $sum: '$royaltyEarned' },\n                    sales: { $sum: '$quantity' }\n                }\n            },\n            { $sort: { '_id.month': 1 } }\n        ]);\n\n        const topBooks = await Sale.aggregate([\n            { $match: { author: authorId } },\n            {\n                $group: {\n                    _id: '$book',\n                    totalSales: { $sum: '$quantity' },\n                    totalRoyalty: { $sum: '$royaltyEarned' }\n                }\n            },\n            { $sort: { totalSales: -1 } },\n            { $limit: 5 }\n        ]);\n\n        const inventoryAlerts = await Inventory.find({\n            author: authorId,\n            quantityAvailable: { $lt: 20 }\n        }).populate('book', 'title');\n\n        const recentTransactions = await Sale.find({ author: authorId })\n            .sort({ date: -1 })\n            .limit(5)\n            .populate('book', 'title');\n\n        const dashboardData = {\n            overallStats: overallStats[0] || {\n                totalBooks: 0,\n                totalInventory: 0,\n                avgRoyaltyPercentage: 0\n            },\n            monthlyPerformance: monthlyEarnings[0] || {\n                totalRoyalty: 0,\n                totalSales: 0\n            },\n            yearlyTrend,\n            topBooks: await Book.populate(topBooks, { path: '_id', select: 'title' }),\n            inventoryAlerts,\n            recentTransactions,\n            lastUpdated: new Date()\n        };\n\n        res.json(dashboardData);\n    } catch (error) {\n        res.status(500).json({ message: error.message });\n    }\n});\n\n// Add new endpoints for Monthly Revenue\nrouter.get('/earnings/monthly', auth, async (req, res) => {\n    try {\n        const authorId = req.user.userId;\n        const currentMonth = moment().startOf('month');\n        const target = 15000; // You might want to make this configurable\n\n        const monthlyRevenue = await Sale.aggregate([\n            {\n                $match: {\n                    author: authorId,\n                    date: { $gte: currentMonth.toDate() }\n                }\n            },\n            {\n                $group: {\n                    _id: null,\n                    current: { $sum: '$royaltyEarned' }\n                }\n            }\n        ]);\n\n        const current = monthlyRevenue[0]?.current || 0;\n        const progress = (current / target) * 100;\n\n        res.json({\n            monthlyRevenue: {\n                target,\n                current,\n                progress,\n                growth: 28.14 // Calculate this based on previous month\n            }\n        });\n    } catch (error) {\n        res.status(500).json({ message: error.message });\n    }\n});\n\nrouter.get('/genre-analytics', auth, async (req, res) => {\n    try {\n        const genreStats = await Book.aggregate([\n            { $match: { author: req.user.userId } },\n            {\n                $group: {\n                    _id: '$genre',\n                    bookCount: { $sum: 1 },\n                    totalSales: { $sum: '$publishingDetails.soldCopies' },\n                    avgRoyalty: { $avg: '$publishingDetails.royaltyEarned' }\n                }\n            }\n        ]);\n\n        res.json(genreStats);\n    } catch (error) {\n        res.status(500).json({ message: error.message });\n    }\n});\n\nmodule.exports = router;"
        }
    ]
}