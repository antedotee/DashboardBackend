{
    "sourceFile": "routes/admin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1738898805195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1738898805195,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst auth = require('../middleware/auth');\nconst Author = require('../models/Author');\nconst Book = require('../models/Book');\nconst Sale = require('../models/Sale');\n\n// Admin middleware to check if user is admin\nconst isAdmin = async (req, res, next) => {\n    if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied. Admin only.' });\n    }\n    next();\n};\n\n// Get all authors with their stats\nrouter.get('/authors', auth, isAdmin, async (req, res) => {\n    try {\n        const authors = await Author.find().select('-password');\n        const authorStats = await Promise.all(authors.map(async (author) => {\n            const books = await Book.countDocuments({ author: author._id });\n            const sales = await Sale.aggregate([\n                { $match: { author: author._id } },\n                {\n                    $group: {\n                        _id: null,\n                        totalSales: { $sum: '$quantity' },\n                        totalRevenue: { $sum: '$amount' },\n                        totalRoyalty: { $sum: '$royaltyEarned' }\n                    }\n                }\n            ]);\n\n            return {\n                ...author.toObject(),\n                statistics: {\n                    totalBooks: books,\n                    totalSales: sales[0]?.totalSales || 0,\n                    totalRevenue: sales[0]?.totalRevenue || 0,\n                    totalRoyalty: sales[0]?.totalRoyalty || 0\n                }\n            };\n        }));\n\n        res.json(authorStats);\n    } catch (error) {\n        res.status(500).json({ message: error.message });\n    }\n});\n\n// Update author details\nrouter.put('/authors/:authorId', auth, isAdmin, async (req, res) => {\n    try {\n        const { authorId } = req.params;\n        const updates = req.body;\n        \n        // Remove sensitive fields from updates\n        delete updates.password;\n        delete updates.role;\n\n        const author = await Author.findByIdAndUpdate(\n            authorId,\n            { $set: updates },\n            { new: true }\n        ).select('-password');\n\n        if (!author) {\n            return res.status(404).json({ message: 'Author not found' });\n        }\n\n        res.json(author);\n    } catch (error) {\n        res.status(400).json({ message: error.message });\n    }\n});\n\n// Update author's royalty rates\nrouter.put('/authors/:authorId/royalty', auth, isAdmin, async (req, res) => {\n    try {\n        const { authorId } = req.params;\n        const { bookId, newRoyaltyPercentage } = req.body;\n\n        const book = await Book.findOneAndUpdate(\n            { _id: bookId, author: authorId },\n            { \n                $set: { 'publishingDetails.royaltyPercentage': newRoyaltyPercentage }\n            },\n            { new: true }\n        );\n\n        if (!book) {\n            return res.status(404).json({ message: 'Book not found' });\n        }\n\n        res.json(book);\n    } catch (error) {\n        res.status(400).json({ message: error.message });\n    }\n});\n\n// Get author's detailed performance\nrouter.get('/authors/:authorId/performance', auth, isAdmin, async (req, res) => {\n    try {\n        const { authorId } = req.params;\n        const { startDate, endDate } = req.query;\n\n        const query = { author: authorId };\n        if (startDate && endDate) {\n            query.date = {\n                $gte: new Date(startDate),\n                $lte: new Date(endDate)\n            };\n        }\n\n        const performance = await Sale.aggregate([\n            { $match: query },\n            {\n                $group: {\n                    _id: {\n                        year: { $year: '$date' },\n                        month: { $month: '$date' }\n                    },\n                    sales: { $sum: '$quantity' },\n                    revenue: { $sum: '$amount' },\n                    royalty: { $sum: '$royaltyEarned' }\n                }\n            },\n            { $sort: { '_id.year': -1, '_id.month': -1 } }\n        ]);\n\n        res.json(performance);\n    } catch (error) {\n        res.status(500).json({ message: error.message });\n    }\n});\n\nmodule.exports = router;"
        }
    ]
}