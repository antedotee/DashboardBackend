{
    "sourceFile": "routes/test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1738894984820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738895357583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n // seedData.js\n const mongoose = require('mongoose');\n const bcrypt = require('bcryptjs');\n-const User = require('./models/User');\n-const Book = require('./models/Book');\n-const Sale = require('./models/Sale');\n-const Inventory = require('./models/Inventory');\n-const Earning = require('./models/Earning');\n-require('dotenv').config();\n+const User = require('../models/User');\n+const Book = require('../models/Book');\n+const Sale = require('../models/Sale');\n+const Inventory = require('../models/Inventory');\n+const Earning = require('../models/Earning');\n+require('dotenv').config({ path: '../.env' });\n \n const connectDB = async () => {\n     try {\n         await mongoose.connect(process.env.MONGODB_URI);\n"
                },
                {
                    "date": 1738895392027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,15 @@\n const Book = require('../models/Book');\n const Sale = require('../models/Sale');\n const Inventory = require('../models/Inventory');\n const Earning = require('../models/Earning');\n-require('dotenv').config({ path: '../.env' });\n+// Update the dotenv config to use the correct path\n+require('dotenv').config({ path: '/Users/devanshdv/Documents/Backend/.env' });\n \n const connectDB = async () => {\n     try {\n+        // Add console.log to debug the MongoDB URI\n+        console.log('Attempting to connect with URI:', process.env.MONGODB_URI);\n         await mongoose.connect(process.env.MONGODB_URI);\n         console.log('MongoDB connected for seeding...');\n     } catch (error) {\n         console.error('Error connecting to MongoDB:', error);\n"
                }
            ],
            "date": 1738894984820,
            "name": "Commit-0",
            "content": "// seedData.js\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst User = require('./models/User');\nconst Book = require('./models/Book');\nconst Sale = require('./models/Sale');\nconst Inventory = require('./models/Inventory');\nconst Earning = require('./models/Earning');\nrequire('dotenv').config();\n\nconst connectDB = async () => {\n    try {\n        await mongoose.connect(process.env.MONGODB_URI);\n        console.log('MongoDB connected for seeding...');\n    } catch (error) {\n        console.error('Error connecting to MongoDB:', error);\n        process.exit(1);\n    }\n};\n\nconst createDummyUser = async () => {\n    // Create a test user\n    const hashedPassword = await bcrypt.hash('password123', 10);\n    const user = new User({\n        username: 'johndoe',\n        email: 'john@example.com',\n        password: hashedPassword,\n        role: 'author',\n        profile: {\n            name: 'John Doe',\n            avatar: 'https://example.com/avatar.jpg',\n            location: 'New York, USA',\n            bio: 'Bestselling author of programming books',\n            achievements: ['Best Seller 2023', 'Editor\\'s Choice']\n        },\n        stats: {\n            publications: 6,\n            avgRating: 4.5,\n            followers: 1200\n        }\n    });\n\n    return await user.save();\n};\n\nconst createDummyBooks = async (userId) => {\n    const books = [\n        {\n            title: 'The Art of Programming',\n            language: 'English',\n            author: userId,\n            price: 29.99,\n            genre: 'Programming',\n            isbn: '978-1234567891',\n            pages: 450,\n            coverType: 'Paperback',\n            publishingDetails: {\n                edition: new Date('2023-01-01'),\n                quantity: 1000,\n                mrp: 39.99,\n                royaltyPercentage: 15,\n                soldCopies: 250,\n                royaltyEarned: 1250.50\n            }\n        },\n        {\n            title: 'Data Structures Explained',\n            language: 'English',\n            author: userId,\n            price: 34.99,\n            genre: 'Computer Science',\n            isbn: '978-1234567892',\n            pages: 380,\n            coverType: 'Hardcover',\n            publishingDetails: {\n                edition: new Date('2023-03-15'),\n                quantity: 800,\n                mrp: 44.99,\n                royaltyPercentage: 20,\n                soldCopies: 315,\n                royaltyEarned: 2100.75\n            }\n        },\n        // Add more books as needed\n    ];\n\n    return await Book.insertMany(books);\n};\n\nconst createDummySales = async (userId, books) => {\n    const sales = [];\n    const months = 6; // Create 6 months of sales data\n\n    for (const book of books) {\n        for (let i = 0; i < months; i++) {\n            const date = new Date();\n            date.setMonth(date.getMonth() - i);\n\n            // Random sales between 10 and 50 for each month\n            const quantity = Math.floor(Math.random() * 40) + 10;\n            const amount = quantity * book.price;\n            const royaltyEarned = (amount * book.publishingDetails.royaltyPercentage) / 100;\n\n            sales.push({\n                book: book._id,\n                author: userId,\n                quantity,\n                amount,\n                royaltyEarned,\n                date,\n                paymentStatus: 'Completed'\n            });\n        }\n    }\n\n    return await Sale.insertMany(sales);\n};\n\nconst createDummyInventory = async (userId, books) => {\n    const inventories = books.map(book => ({\n        book: book._id,\n        author: userId,\n        quantityTotal: book.publishingDetails.quantity,\n        quantityAvailable: book.publishingDetails.quantity - book.publishingDetails.soldCopies,\n        transactions: [\n            {\n                type: 'addition',\n                quantity: book.publishingDetails.quantity,\n                notes: 'Initial stock'\n            },\n            {\n                type: 'sale',\n                quantity: book.publishingDetails.soldCopies,\n                notes: 'Cumulative sales'\n            }\n        ]\n    }));\n\n    return await Inventory.insertMany(inventories);\n};\n\nconst createDummyEarnings = async (userId, books) => {\n    const earnings = [];\n    const months = 6; // Create 6 months of earnings data\n\n    for (const book of books) {\n        for (let i = 0; i < months; i++) {\n            const date = new Date();\n            date.setMonth(date.getMonth() - i);\n\n            earnings.push({\n                author: userId,\n                book: book._id,\n                month: date.getMonth() + 1,\n                year: date.getFullYear(),\n                royaltyEarned: Math.random() * 1000 + 500, // Random earnings between 500 and 1500\n                salesCount: Math.floor(Math.random() * 50) + 20, // Random sales between 20 and 70\n                paymentStatus: 'Paid'\n            });\n        }\n    }\n\n    return await Earnings.insertMany(earnings);\n};\n\nconst seedDatabase = async () => {\n    try {\n        await connectDB();\n\n        // Clear existing data\n        await Promise.all([\n            User.deleteMany({}),\n            Book.deleteMany({}),\n            Sale.deleteMany({}),\n            Inventory.deleteMany({}),\n            Earning.deleteMany({})\n        ]);\n\n        console.log('Existing data cleared');\n\n        // Create new data\n        const user = await createDummyUser();\n        console.log('User created:', user.username);\n\n        const books = await createDummyBooks(user._id);\n        console.log('Books created:', books.length);\n\n        const sales = await createDummySales(user._id, books);\n        console.log('Sales created:', sales.length);\n\n        const inventories = await createDummyInventory(user._id, books);\n        console.log('Inventories created:', inventories.length);\n\n        const earnings = await createDummyEarnings(user._id, books);\n        console.log('Earnings created:', earnings.length);\n\n        console.log('Database seeded successfully!');\n        process.exit(0);\n    } catch (error) {\n        console.error('Error seeding database:', error);\n        process.exit(1);\n    }\n};\n\nseedDatabase();"
        }
    ]
}